<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DarkRift</name>
    </assembly>
    <members>
        <member name="M:DarkRift.BigEndianHelper.WriteBytes(System.Byte[],System.Int32,System.Int16)">
            <summary>
                Writes the bytes from the short to the destination array at offset.
            </summary>
            <param name="destination">The array to write to.</param>
            <param name="offset">The position of the array to begin writing.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:DarkRift.BigEndianHelper.WriteBytes(System.Byte[],System.Int32,System.UInt16)">
            <summary>
                Writes the bytes from the unsigned short to the destination array at offset.
            </summary>
            <param name="destination">The array to write to.</param>
            <param name="offset">The position of the array to begin writing.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:DarkRift.BigEndianHelper.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Writes the bytes from the int to the destination array at offset.
            </summary>
            <param name="destination">The array to write to.</param>
            <param name="offset">The position of the array to begin writing.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:DarkRift.BigEndianHelper.WriteBytes(System.Byte[],System.Int32,System.UInt32)">
            <summary>
                Writes the bytes from the unsigned int to the destination array at offset.
            </summary>
            <param name="destination">The array to write to.</param>
            <param name="offset">The position of the array to begin writing.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:DarkRift.BigEndianHelper.WriteBytes(System.Byte[],System.Int32,System.Int64)">
            <summary>
                Writes the bytes from the long to the destination array at offset.
            </summary>
            <param name="destination">The array to write to.</param>
            <param name="offset">The position of the array to begin writing.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:DarkRift.BigEndianHelper.WriteBytes(System.Byte[],System.Int32,System.UInt64)">
            <summary>
                Writes the bytes from the unsigned long to the destination array at offset.
            </summary>
            <param name="destination">The array to write to.</param>
            <param name="offset">The position of the array to begin writing.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:DarkRift.BigEndianHelper.ReadInt16(System.Byte[],System.Int32)">
            <summary>
                Reads an short from the array at offset.
            </summary>
            <param name="source">The array to read from.</param>
            <param name="offset">The position to begin reading from.</param>
            <returns>The short read.</returns>
        </member>
        <member name="M:DarkRift.BigEndianHelper.ReadUInt16(System.Byte[],System.Int32)">
            <summary>
                Reads an unsigned short from the array at offset.
            </summary>
            <param name="source">The array to read from.</param>
            <param name="offset">The position to begin reading from.</param>
            <returns>The unsigned short read.</returns>
        </member>
        <member name="M:DarkRift.BigEndianHelper.ReadInt32(System.Byte[],System.Int32)">
            <summary>
                Reads an integer from the array at offset.
            </summary>
            <param name="source">The array to read from.</param>
            <param name="offset">The position to begin reading from.</param>
            <returns>The integer read.</returns>
        </member>
        <member name="M:DarkRift.BigEndianHelper.ReadUInt32(System.Byte[],System.Int32)">
            <summary>
                Reads an unsigned integer from the array at offset.
            </summary>
            <param name="source">The array to read from.</param>
            <param name="offset">The position to begin reading from.</param>
            <returns>The unsigned integer read.</returns>
        </member>
        <member name="M:DarkRift.BigEndianHelper.ReadInt64(System.Byte[],System.Int32)">
            <summary>
                Reads a long from the array at offset.
            </summary>
            <param name="source">The array to read from.</param>
            <param name="offset">The position to begin reading from.</param>
            <returns>The long read.</returns>
        </member>
        <member name="M:DarkRift.BigEndianHelper.ReadUInt64(System.Byte[],System.Int32)">
            <summary>
                Reads an unsigned long from the array at offset.
            </summary>
            <param name="source">The array to read from.</param>
            <param name="offset">The position to begin reading from.</param>
            <returns>The unsigned long read.</returns>
        </member>
        <member name="T:DarkRift.CommandMessage">
            <summary>
                A messages for sending control sequences between server/clients.
            </summary>
        </member>
        <member name="P:DarkRift.CommandMessage.MessageType">
            <summary>
                The type of message this is.
            </summary>
        </member>
        <member name="P:DarkRift.CommandMessage.CommandCode">
            <summary>
                The <see cref="P:DarkRift.CommandMessage.CommandCode"/> for the command.
            </summary>
        </member>
        <member name="M:DarkRift.CommandMessage.ToBuffer(System.Int32)">
            <summary>
                Converts this message into a buffer.
            </summary>
            <param name="offset">The offset of the data in this buffer.</param>
            <returns>The buffer.</returns>
        </member>
        <member name="T:DarkRift.CommandCode">
            <summary>
                Command codes for control sequences to clients/servers.
            </summary>
        </member>
        <member name="F:DarkRift.CommandCode.Configure">
            <summary>
                A configuration packet to a client.
            </summary>
        </member>
        <member name="F:DarkRift.CommandCode.ClientAssign">
            <summary>
                A new client was assigned to the server.
            </summary>
        </member>
        <member name="T:DarkRift.DarkRiftReader">
            <summary>
                Helper class for converting byte buffers into their original components during deserialization.
            </summary>
            <remarks>Not thread safe as the read order is critical!</remarks>
        </member>
        <member name="P:DarkRift.DarkRiftReader.Encoding">
            <summary>
                The string encoding to use when reading characters.
            </summary>
        </member>
        <member name="F:DarkRift.DarkRiftReader.bytes">
            <summary>
                The bytes we are reading from.
            </summary>
        </member>
        <member name="F:DarkRift.DarkRiftReader.dataOffset">
            <summary>
                The position data starts in the array.
            </summary>
        </member>
        <member name="P:DarkRift.DarkRiftReader.Length">
            <summary>
                The number of bytes in this reader.
            </summary>
        </member>
        <member name="P:DarkRift.DarkRiftReader.Position">
            <summary>
                The number of bytes read so far.
            </summary>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadByte">
            <summary>
                Reads a single byte from the reader.
            </summary>
            <returns>The byte read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadChar">
            <summary>
                Reads a single character from the reader.
            </summary>
            <returns>The character read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadBoolean">
            <summary>
                Reads a single boolean from the reader.
            </summary>
            <returns>The boolean read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadDouble">
            <summary>
                Reads a single double from the reader.
            </summary>
            <returns>The double read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadInt16">
            <summary>
                Reads a single 16bit integer from the reader.
            </summary>
            <returns>The 16bit integer read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadInt32">
            <summary>
                Reads a single 32bit integer from the reader.
            </summary>
            <returns>The 32bit integer read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadInt64">
            <summary>
                Reads a single 64bit integer from the reader.
            </summary>
            <returns>The 64bit integer read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadSByte">
            <summary>
                Reads a single signed byte from the reader.
            </summary>
            <returns>The signed byte read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadSingle">
            <summary>
                Reads a single single from the reader.
            </summary>
            <returns>The single read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadString">
            <summary>
                Reads a single string from the reader using the reader's encoding.
            </summary>
            <returns>The string read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadString(System.Text.Encoding)">
            <summary>
                Reads a single string from the reader using the given encoding.
            </summary>
            <param name="encoding">The encoding to deserialize the string using.</param>
            <returns>The string read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadUInt16">
            <summary>
                Reads a single unsigned 16bit integer from the reader.
            </summary>
            <returns>The unsigned 16bit integer read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadUInt32">
            <summary>
                Reads a single unsigned 32bit integer from the reader.
            </summary>
            <returns>The unsigned 32bit integer read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadUInt64">
            <summary>
                Reads a single unsigned 64bit integer from the reader.
            </summary>
            <returns>The unsigned 64bit integer read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadSerializable``1">
            <summary>
                Reads a single serializable object from the reader.
            </summary>
            <typeparam name="T">The type of the object to read.</typeparam>
            <returns>The serializable object read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadSerializableInto``1(``0@)">
            <summary>
                Reads a single serializable object from the reader into the given object.
            </summary>
            <typeparam name="T">The type of object to read.</typeparam>
            <param name="t">The object to deserialize the data into.</param>
            <returns>The serializable object read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadBytes">
            <summary>
                Reads an array of bytes from the reader.
            </summary>
            <returns>The array of bytes read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadChars">
            <summary>
                Reads a array of characters from the reader.
            </summary>
            <returns>The array of characters read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadChars(System.Text.Encoding)">
            <summary>
                Reads an array of characters from the reader using the given encoding.
            </summary>
            <param name="encoding">The encoding to use during the deserialization.</param>
            <returns>The array of characters read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadBooleans">
            <summary>
                Reads an array of booleans from the reader.
            </summary>
            <returns>The array of booleans read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadDoubles">
            <summary>
                Reads an array of doubles from the reader.
            </summary>
            <returns>The array of doubles read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadInt16s">
            <summary>
                Reads an array of 16bit integers from the reader.
            </summary>
            <returns>The array of 16bit integers read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadInt32s">
            <summary>
                Reads an array of 32bit integers from the reader.
            </summary>
            <returns>The array of 32bit integers read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadInt64s">
            <summary>
                Reads an array of 64bit integers from the reader.
            </summary>
            <returns>The array of 64bit integers read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadSBytes">
            <summary>
                Reads an array of signed bytes from the reader.
            </summary>
            <returns>The array of signed bytes read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadSingles">
            <summary>
                Reads an array of singles from the reader.
            </summary>
            <returns>The array of singles read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadStrings">
            <summary>
                Reads an array of strings from the reader using the reader's encoding.
            </summary>
            <returns>The array of strings read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadUInt16s">
            <summary>
                Reads an array unsigned 16bit integers from the reader.
            </summary>
            <returns>The array of unsigned 16bit integers read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadUInt32s">
            <summary>
                Reads an array unsigned 32bit integers from the reader.
            </summary>
            <returns>The array of unsigned 32bit integers read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadUInt64s">
            <summary>
                Reads an array unsigned 64bit integers from the reader.
            </summary>
            <returns>The array of unsigned 64bit integers read.</returns>
        </member>
        <member name="M:DarkRift.DarkRiftReader.ReadRaw(System.Int32)">
            <summary>
                Reads an array of raw bytes from the reader.
            </summary>
            <param name="length">The number of bytes to read.</param>
            <returns>The array of bytes read.</returns>
        </member>
        <member name="T:DarkRift.DarkRiftWriter">
            <summary>
                Helper class for serializing values into  byte buffers.
            </summary>
            <remarks>
                Not thread safe as the write order is critical!
            </remarks>
        </member>
        <member name="P:DarkRift.DarkRiftWriter.Encoding">
            <summary>
                The string encoding to use when writing characters.
            </summary>
        </member>
        <member name="F:DarkRift.DarkRiftWriter.data">
            <summary>
                The backing array holding the data.
            </summary>
        </member>
        <member name="P:DarkRift.DarkRiftWriter.Data">
            <summary>
                The backing array holding the data.
            </summary>
        </member>
        <member name="P:DarkRift.DarkRiftWriter.Length">
            <summary>
                The number of bytes in this writer.
            </summary>
        </member>
        <member name="P:DarkRift.DarkRiftWriter.Capacity">
            <summary>
                The current capacity of the base array for the writer.
            </summary>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.Byte)">
            <summary>
                Writes a single byte to the writer.
            </summary>
            <param name="value">The byte to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.Char)">
            <summary>
                Writes a single character to the writer.
            </summary>
            <param name="value">The character to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.Boolean)">
            <summary>
                Writes a single boolean to the writer.
            </summary>
            <param name="value">The boolean to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.Double)">
            <summary>
                Writes a single double to the writer.
            </summary>
            <param name="value">The double to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.Int16)">
            <summary>
                Writes a single 16bit integer to the writer.
            </summary>
            <param name="value">The 16bit integer to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.Int32)">
            <summary>
                Writes a single 32bit integer to the writer.
            </summary>
            <param name="value">The 32bit integer to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.Int64)">
            <summary>
                Writes a single 64bit integer to the writer.
            </summary>
            <param name="value">The 64bit integer to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.SByte)">
            <summary>
                Writes a single signed byte to the writer.
            </summary>
            <param name="value">The signed byte to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.Single)">
            <summary>
                Writes a single single to the writer.
            </summary>
            <param name="value">The single to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.UInt16)">
            <summary>
                Writes a single unsigned 16bit integer to the writer.
            </summary>
            <param name="value">The unsigned 16bit integer to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.UInt32)">
            <summary>
                Writes a single unsigned 32bit integer to the writer.
            </summary>
            <param name="value">The unsigned 32bit integer to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.UInt64)">
            <summary>
                Writes a single unsigned 64bit integer to the writer.
            </summary>
            <param name="value">The unsigned 64bit integer to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.String)">
            <summary>
                Writes a single string to the writer using the writer's encoding.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.String,System.Text.Encoding)">
            <summary>
                Writes a single string to the writer using the given encoding.
            </summary>
            <param name="value">The string to write.</param>
            <param name="encoding">The encoding to deserialize the string using.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(DarkRift.IDarkRiftSerializable)">
            <summary>
                Writes a single serializable object to the writer.
            </summary>
            <typeparam name="T">The type of the object to to write.</typeparam>
            <param name="value">The serializable object to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.Byte[])">
            <summary>
                Writes an array of bytes to the writer.
            </summary>
            <param name="value">The array of bytes to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.Char[])">
            <summary>
                Writes a array of characters to the writer.
            </summary>
            <param name="value">The array of characters to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.Char[],System.Text.Encoding)">
            <summary>
                Writes an array of characters to the writer using the given encoding.
            </summary>
            <param name="encoding">The encoding to use during the deserialization.</param>
            <param name="value">The array of characters to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.Boolean[])">
            <summary>
                Writes an array of booleans to the writer.
            </summary>
            <param name="value">The array of booleans to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.Double[])">
            <summary>
                Writes an array of doubles to the writer.
            </summary>
            <param name="value">The array of doubles to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.Int16[])">
            <summary>
                Writes an array of 16bit integers to the writer.
            </summary>
            <param name="value">The array of 16bit integers to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.Int32[])">
            <summary>
                Writes an array of 32bit integers to the writer.
            </summary>
            <param name="value">The array of 32bit integers to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.Int64[])">
            <summary>
                Writes an array of 64bit integers to the writer.
            </summary>
            <param name="value">The array of 64bit integers to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.SByte[])">
            <summary>
                Writes an array of signed bytes to the writer.
            </summary>
            <param name="value">The array of signed bytes to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.Single[])">
            <summary>
                Writes an array of singles to the writer.
            </summary>
            <param name="value">The array of singles to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.String[])">
            <summary>
                Writes an array of strings to the writer using the writer's encoding.
            </summary>
            <param name="value">The array of strings to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.UInt16[])">
            <summary>
                Writes an array unsigned 16bit integers to the writer.
            </summary>
            <param name="value">The array of unsigned 16bit integers to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.UInt32[])">
            <summary>
                Writes an array unsigned 32bit integers to the writer.
            </summary>
            <param name="value">The array of unsigned 32bit integers to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.Write(System.UInt64[])">
            <summary>
                Writes an array unsigned 64bit integers to the writer.
            </summary>
            <param name="value">The array of unsigned 64bit integers to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.WriteRaw(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Writes an array of raw bytes to the writer.
            </summary>
            <param name="bytes">The array of bytes to write.</param>
            <param name="offset">The start point in the array to write.</param>
            <param name="length">The number of bytes to write.</param>
        </member>
        <member name="M:DarkRift.DarkRiftWriter.EnsureCapacity(System.Int32)">
            <summary>
                Ensures the buffer has the enough capacity to include new data.
            </summary>
            <param name="extraCapacity">The extra capacity that is needed.</param>
        </member>
        <member name="T:DarkRift.DeserializeEvent">
            <summary>
                Describes the deserialization in progress.
            </summary>
        </member>
        <member name="P:DarkRift.DeserializeEvent.Reader">
            <summary>
                The reader to read the data from.
            </summary>
        </member>
        <member name="T:DarkRift.Dispatching.ActionDispatcherTask">
            <summary>
                A <see cref="T:DarkRift.Dispatching.DispatcherTask"/> that has no return value.
            </summary>
        </member>
        <member name="F:DarkRift.Dispatching.ActionDispatcherTask.Action">
            <summary>
                The action to execute.
            </summary>
        </member>
        <member name="M:DarkRift.Dispatching.ActionDispatcherTask.#ctor(System.Action)">
            <summary>
                Creates an ActionDispatcherTask for the actions given.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:DarkRift.Dispatching.ActionDispatcherTask.Execute">
            <summary>
                Executes the action.
            </summary>
        </member>
        <member name="T:DarkRift.Dispatching.Dispatcher">
            <summary>
                Dispatcher for running tasks on the main thread.
            </summary>
            <remarks>
                The dispatcher is used by DarkRift to move code to the main thread to be executed, either for convienience for programmers that do not know 
                how to use multithreading safely or for use on frameworks where execution across multiple threads is not allowed. Similarly other DarkRift 
                code can also make use of the dispatcher if they require threads to merge execution.
            </remarks>
        </member>
        <member name="P:DarkRift.Dispatching.Dispatcher.WaitHandle">
            <summary>
                A wait handle for new dispatcher jobs.
            </summary>
            <remarks>
                This is released when a new task is assigned to the dispatcher and so can be used to hold the task executing 
                thread idle until a job is posted rather than constantly consuming resources.
            </remarks>
        </member>
        <member name="F:DarkRift.Dispatching.Dispatcher.tasks">
            <summary>
                The tasks that need executing.
            </summary>
        </member>
        <member name="F:DarkRift.Dispatching.Dispatcher.jobMutex">
            <summary>
                The mutex for new jobs in the queue.
            </summary>
        </member>
        <member name="P:DarkRift.Dispatching.Dispatcher.ExceptionsOnExecutorThread">
            <summary>
                Whether exceptions should be raised on the executor thread.
            </summary>
            <remarks>
                When set true, any unhandled exceptions that are rasised during the execution of a task will be rethrown on the thread 
                executing the tasks. The exceptions thrown within task executions can still be retreived by accessing the task object.
            </remarks>
        </member>
        <member name="P:DarkRift.Dispatching.Dispatcher.Count">
            <summary>
                The number of items waiting to be dispatched.
            </summary>
        </member>
        <member name="M:DarkRift.Dispatching.Dispatcher.#ctor(System.Boolean)">
            <summary>
                Creates a new Dispatcher indicating whether exceptions should be thrown on the executing thread.
            </summary>
            <param name="exceptionsOnExecutorThread">Whether exceptions should be thrown from the executing thread.</param>
        </member>
        <member name="M:DarkRift.Dispatching.Dispatcher.InvokeWait(System.Action)">
            <summary>
                Queues the operation for execution on the main thread and waits until it has completed.
            </summary>
            <remarks>
                If an exception occurs during the processing of the action the event will be re-thrown by this function for you
                to handle.
            </remarks>
            <param name="action">The operation to execute.</param>
        </member>
        <member name="M:DarkRift.Dispatching.Dispatcher.InvokeWait``1(System.Func{``0})">
            <summary>
                Queues the operation for execution on the main thread and waits until it has completed
            </summary>
            <remarks>
                If an exception occurs during the processing of the function the event will be re-thrown by this function for you
                to handle.
            </remarks>
            <typeparam name="T">The result of the function</typeparam>
            <param name="function">The function to execute.</param>
            <returns>The result of the function executed.</returns>
        </member>
        <member name="M:DarkRift.Dispatching.Dispatcher.InvokeAsync(System.Action)">
            <summary>
                Queues the operation for execution on the main thread.
            </summary>
            <param name="action">The operation to execute.</param>
            <returns>A DispatcherTask for this operation.</returns>
            <remarks>
                This returns an IDisposable object, it is your responsibility to dispose of it when you're done!
            </remarks>
        </member>
        <member name="M:DarkRift.Dispatching.Dispatcher.InvokeAsync``1(System.Func{``0})">
            <summary>
                Queues the operation for execution on the main thread.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="function">The function to execute.</param>
            <returns>A DispatcherTask for this operation.</returns>
            <remarks>
                This returns an IDisposable object, it is your responsibility to dispose of it when you're done!
            </remarks>
        </member>
        <member name="M:DarkRift.Dispatching.Dispatcher.ExecuteDispatcherTasks">
            <summary>
                Executes all tasks queued for execution.
            </summary>
        </member>
        <member name="T:DarkRift.Dispatching.DispatcherTask">
            <summary>
                Base class for all tasks on the dispatcher.
            </summary>
            <remarks>
                Note that DispatcherTask is marked <see cref="T:System.IDisposable"/> so must be disposed of accordingly after use.
            </remarks>
        </member>
        <member name="P:DarkRift.Dispatching.DispatcherTask.WaitHandle">
            <summary>
                The wait handle that will be set when the operation completes.
            </summary>
            <remarks>
                This can be used to pause another thread's execution until the task has completed on the main 
                dispatcher's execution thread.
            </remarks>
        </member>
        <member name="F:DarkRift.Dispatching.DispatcherTask.manualResetEvent">
            <summary>
                The ManualResetEvent that will be set once executed.
            </summary>
        </member>
        <member name="P:DarkRift.Dispatching.DispatcherTask.TaskState">
            <summary>
                The state of this dispatcher task.
            </summary>
        </member>
        <member name="P:DarkRift.Dispatching.DispatcherTask.Exception">
            <summary>
                The exception that occured while the event was being processed.
            </summary>
        </member>
        <member name="M:DarkRift.Dispatching.DispatcherTask.#ctor">
            <summary>
                Creates a new DispatcherTask.
            </summary>
        </member>
        <member name="M:DarkRift.Dispatching.DispatcherTask.Execute">
            <summary>
                Executes the task.
            </summary>
        </member>
        <member name="M:DarkRift.Dispatching.DispatcherTask.SetTaskComplete">
            <summary>
                Sets the wait handle for this task and updates the TaskState.
            </summary>
        </member>
        <member name="M:DarkRift.Dispatching.DispatcherTask.Dispose">
            <summary>
                Dispose of this connection.
            </summary>
        </member>
        <member name="M:DarkRift.Dispatching.DispatcherTask.Dispose(System.Boolean)">
            <summary>
                Dispose of this connection.
            </summary>
            <param name="disposing">Are we disposing?</param>
        </member>
        <member name="T:DarkRift.Dispatching.DispatcherTaskState">
            <summary>
                The possible states that a <see cref="T:DarkRift.Dispatching.DispatcherTask"/>can be in.
            </summary>
        </member>
        <member name="F:DarkRift.Dispatching.DispatcherTaskState.Queued">
            <summary>
                The task is queued for execution in the dispatcher but not yet run.
            </summary>
        </member>
        <member name="F:DarkRift.Dispatching.DispatcherTaskState.Complete">
            <summary>
                The task has been completed.
            </summary>
        </member>
        <member name="F:DarkRift.Dispatching.DispatcherTaskState.Failed">
            <summary>
                The task was run but threw an exception.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:DarkRift.Dispatching.FunctionDispatcherTask`1" -->
        <member name="F:DarkRift.Dispatching.FunctionDispatcherTask`1.Function">
            <summary>
                The function to execute.
            </summary>
        </member>
        <member name="P:DarkRift.Dispatching.FunctionDispatcherTask`1.Result">
            <summary>
                The value returned from the function.
            </summary>
        </member>
        <member name="M:DarkRift.Dispatching.FunctionDispatcherTask`1.Execute">
            <summary>
                Executes the function.
            </summary>
        </member>
        <member name="T:DarkRift.Dispatching.IDispatcher">
            <summary>
                Interface for the Dispatcher.
            </summary>
        </member>
        <member name="P:DarkRift.Dispatching.IDispatcher.Count">
            <summary>
                The number of items waiting to be dispatched.
            </summary>
        </member>
        <member name="M:DarkRift.Dispatching.IDispatcher.InvokeWait(System.Action)">
            <summary>
                Queues the operation for execution on the main thread and waits until it has completed.
            </summary>
            <param name="action">The operation to execute.</param>
        </member>
        <member name="M:DarkRift.Dispatching.IDispatcher.InvokeWait``1(System.Func{``0})">
            <summary>
                Queues the operation for execution on the main thread and waits until it has completed
            </summary>
            <typeparam name="T">The result of the function</typeparam>
            <param name="function">The function to execute.</param>
            <returns>The result of the function executed.</returns>
        </member>
        <member name="M:DarkRift.Dispatching.IDispatcher.InvokeAsync(System.Action)">
            <summary>
                Queues the operation for execution on the main thread.
            </summary>
            <param name="action">The operation to execute.</param>
            <returns>A DispatcherTask for this operation.</returns>
            <remarks>This returns an IDisposable object, it is your responsibility to dispose of it when you're done!</remarks>
        </member>
        <member name="M:DarkRift.Dispatching.IDispatcher.InvokeAsync``1(System.Func{``0})">
            <summary>
                Queues the operation for execution on the main thread.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="function">The function to execute.</param>
            <returns>A DispatcherTask for this operation.</returns>
            <remarks>This returns an IDisposable object, it is your responsibility to dispose of it when you're done!</remarks>
        </member>
        <member name="T:DarkRift.IDarkRiftSerializable">
            <summary>
                Interface for specifying how an object is serialized and deserialized.
            </summary>
        </member>
        <member name="M:DarkRift.IDarkRiftSerializable.Deserialize(DarkRift.DeserializeEvent)">
            <summary>
                Deserializes a DarkRiftReader into the object.
            </summary>
            <param name="e">Details about the deserialization.</param>
        </member>
        <member name="M:DarkRift.IDarkRiftSerializable.Serialize(DarkRift.SerializeEvent)">
            <summary>
                Serializes the object to the DarkRiftWriter.
            </summary>
            <param name="e">Details about the serialization.</param>
        </member>
        <member name="T:DarkRift.IPVersion">
            <summary>
                IP addressing modes.
            </summary>
        </member>
        <member name="F:DarkRift.IPVersion.IPv4">
            <summary>
                Indicates IPv4 is in use/should be used.
            </summary>
        </member>
        <member name="F:DarkRift.IPVersion.IPv6">
            <summary>
                Indicates IPv6 is in user/should be used.
            </summary>
        </member>
        <member name="T:DarkRift.LogType">
            <summary>
                The level of logging that is associated with a log entry.
            </summary>
        </member>
        <member name="F:DarkRift.LogType.Trace">
            <summary>
                The quietest log level. Indicates the information is not of immediate importance but it worth note.
            </summary>
        </member>
        <member name="F:DarkRift.LogType.Info">
            <summary>
                Indicates the information is of general use.
            </summary>
        </member>
        <member name="F:DarkRift.LogType.Warning">
            <summary>
                Indicates the information is warning the user.
            </summary>
        </member>
        <member name="F:DarkRift.LogType.Error">
            <summary>
                Indicates the information is the result of an error.
            </summary>
        </member>
        <member name="F:DarkRift.LogType.Fatal">
            <summary>
                Indicates the information is the result of a fatal error that cannot be recovered from.
            </summary>
        </member>
        <member name="T:DarkRift.MessageFrame">
            <summary>
                Internal wrapper class for messages transmitting/receiving.
            </summary>
        </member>
        <member name="P:DarkRift.MessageFrame.IsCommand">
            <summary>
                Whether this message is a command message.
            </summary>
        </member>
        <member name="P:DarkRift.MessageFrame.Message">
            <summary>
                The actual message received.
            </summary>
        </member>
        <member name="M:DarkRift.MessageFrame.FromBuffer(System.Byte[],System.Int32,System.Boolean)">
            <summary>
                Creates a message template from the given buffer.
            </summary>
            <param name="buffer">The buffer to create the message from.</param>
            <param name="offset">The offset of data in the buffer.</param>
            <param name="isReadOnly">Should the created message be read only?</param>
            <returns>The new message template.</returns>
        </member>
        <member name="M:DarkRift.MessageFrame.ToBuffer(System.Int32)">
            <summary>
                Creates a buffer out of a message.
            </summary>
            <param name="message">The message to create the buffer from.</param>
            <returns>The buffer.</returns>
        </member>
        <member name="T:DarkRift.Message">
            <summary>
                Base class for all messages.
            </summary>
            <remarks>
                Since each message is handled by single, separate threads this class is not thread safe.
            </remarks>
        </member>
        <member name="F:DarkRift.Message.buffer">
            <summary>
                The data buffer received.
            </summary>
        </member>
        <member name="F:DarkRift.Message.dataOffset">
            <summary>
                The offset of data in the buffer.
            </summary>
        </member>
        <member name="P:DarkRift.Message.DataLength">
            <summary>
                The number of bytes of data in this message.
            </summary>
        </member>
        <member name="P:DarkRift.Message.IsReadOnly">
            <summary>
                Are setters on this object disabled?
            </summary>
        </member>
        <member name="P:DarkRift.Message.MessageType">
            <summary>
                The type of message this is.
            </summary>
        </member>
        <member name="M:DarkRift.Message.GetReader">
            <summary>
                Creates a DarkRiftReader to read the data in the message.
            </summary>
            <returns>A DarkRiftReader for the message.</returns>
        </member>
        <member name="M:DarkRift.Message.SetWriter(DarkRift.DarkRiftWriter)">
            <summary>
                Sets the data of the message to the writer given.
            </summary>
            <param name="writer">The writer to send.</param>
            <remarks>
                Assigning this to be null has the same effect as assigning an empty writer and will just 
                result in the data being empty.
            </remarks>
        </member>
        <member name="M:DarkRift.Message.Deserialize``1">
            <summary>
                Deserializes the data to the given object.
            </summary>
            <typeparam name="T">The type of object to deserialize to.</typeparam>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:DarkRift.Message.Serialize(DarkRift.IDarkRiftSerializable)">
            <summary>
                Serializes an object into the data of this message.
            </summary>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="M:DarkRift.Message.CopyDataTo(System.Byte[],System.Int32)">
            <summary>
                Copies the message data into the given array.
            </summary>
            <param name="buffer">The array to copy data to.</param>
            <param name="offset">The offset of the array data will be written to.</param>
        </member>
        <member name="M:DarkRift.Message.ToBuffer(System.Int32)">
            <summary>
                Converts this message into a buffer.
            </summary>
            <param name="offset">The offset of the data in this buffer.</param>
            <returns>The buffer.</returns>
        </member>
        <member name="T:DarkRift.MessageType">
            <summary>
                An enumeration for message types and their respective code.
            </summary>
        </member>
        <member name="T:DarkRift.SendMode">
            <summary>
                The send mode to govern how messages are sent.
            </summary>
        </member>
        <member name="F:DarkRift.SendMode.Unreliable">
            <summary>
                Sends the message unreliably.
            </summary>
        </member>
        <member name="F:DarkRift.SendMode.Reliable">
            <summary>
                Sends the message ensuring it will arrive at the destination once and only once.
            </summary>
        </member>
        <member name="F:DarkRift.SendMode.FragmentedReliable">
            <summary>
                Sends the message reliably and splits up large packets during sending.
            </summary>
        </member>
        <member name="T:DarkRift.SerializeEvent">
            <summary>
                DEscribes the serialization in progress.
            </summary>
        </member>
        <member name="P:DarkRift.SerializeEvent.Writer">
            <summary>
                The writer to write the object data to.
            </summary>
        </member>
        <member name="T:DarkRift.SimpleMessage">
            <summary>
                A message type containing only data.
            </summary>
        </member>
        <member name="P:DarkRift.SimpleMessage.MessageType">
            <summary>
                The type of message this is.
            </summary>
        </member>
        <member name="M:DarkRift.SimpleMessage.ToBuffer(System.Int32)">
            <summary>
                Converts this message into a buffer.
            </summary>
            <param name="offset">The offset of the data in this buffer.</param>
            <returns>The buffer.</returns>
        </member>
        <member name="T:DarkRift.TagSubjectMessage">
            <summary>
                A message containing tag and subject headers.
            </summary>
        </member>
        <member name="P:DarkRift.TagSubjectMessage.MessageType">
            <summary>
                The type of message this is.
            </summary>
        </member>
        <member name="P:DarkRift.TagSubjectMessage.Tag">
            <summary>
                The tag of the message.
            </summary>
        </member>
        <member name="P:DarkRift.TagSubjectMessage.Subject">
            <summary>
                The subject of the message.
            </summary>
        </member>
        <member name="M:DarkRift.TagSubjectMessage.ToBuffer(System.Int32)">
            <summary>
                Converts this message into a buffer.
            </summary>
            <param name="offset">The offset of the data in this buffer.</param>
            <returns>The buffer.</returns>
        </member>
        <member name="T:DarkRift.TransportProtocol">
            <summary>
                The internet transport protocol associated with a message.
            </summary>
        </member>
        <member name="F:DarkRift.TransportProtocol.Tcp">
            <summary>
                Indicates TCP was associated.
            </summary>
        </member>
        <member name="F:DarkRift.TransportProtocol.Udp">
            <summary>
                Indicates UDP was associated.
            </summary>
        </member>
        <member name="T:DarkRift.XmlConfigurationException">
            <summary>
                An exception raised for invalid XML configuration files.
            </summary>
        </member>
    </members>
</doc>
